{"version":3,"sources":["utils.js","components/Tag.js","components/Card.js","components/Button.js","components/Form.js","components/Popover.js","hooks.js","components/CardEditor.js","components/Menu.js","components/CardsList.js","data.js","components/Board.js","components/Header.js","components/Footer.js","App.js","index.js"],"names":["_getNextNumber","cards","nextNumber","id","number","_generateId","shortid","generate","Tag","props","text","className","Card","draggableId","index","provided","ref","innerRef","draggableProps","dragHandleProps","style","marginBottom","tags","map","tag","key","margin","description","Button","variant","onClick","icon","Form","formRef","React","createRef","controlRef","state","initialValue","handleOnChangeText","bind","handleOnSubmit","handleOnKeyDown","this","current","focus","event","setState","target","value","preventDefault","onClickSubmit","type","placeholder","onChange","onKeyDown","buttonText","onClickCancel","Component","defaultProps","Popover","title","children","onClickOutside","offset","popover","useRef","node","handleClick","useCallback","e","contains","useEffect","document","addEventListener","removeEventListener","useClickOutsideEffect","marginTop","top","marginLeft","left","CardEditor","editorRef","isLabelEditOpen","closeOnlyLabel","handleOutsideClick","display","flexDirection","position","onSaveCard","onCopyCard","onArchiveCard","onRemoveTag","onAddTag","Menu","isOpen","actions","action","actionsIndex","actionIndex","CardsList","creatingNewCard","editCardId","editCardText","editCardTags","cardRefs","onToggleMenu","onCopyList","onMoveAllCards","onRemoveAllCards","onRemoveList","handleAddNewCard","handleCancelNewCard","handleCreateNewCard","handleEditCard","handleCancelEdit","handleCopyCard","handleSaveCard","handleArchiveCard","handleRemoveTag","handleAddTag","cardText","onAddCard","onRemoveCard","onEditCard","tagId","isMenuOpen","length","droppableId","direction","droppableProps","renderHeader","renderCards","renderFooter","getBoundingClientRect","data","lists","cardIds","listOrder","Board","newListText","creatingNewList","openMenuId","handleAddList","handleRemoveList","handleAddCard","handleRemoveCard","handleRemoveAllCards","handleCopyList","handleMoveAllCards","handleToggleMenu","handleDragEnd","renderLists","trim","push","listId","indexOf","splice","cardId","cardIndex","clonedCards","card","newId","newNumber","newListId","Object","keys","destination","source","orderCards","console","log","onDragEnd","renderNewList","Header","Footer","href","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.875456d2.chunk.js","sourcesContent":["import shortid from 'shortid';\n\n/**\n * Get the next card number.\n * @param {object} cards - all the existing cards\n * @return {number} the next card number\n */\nexport const _getNextNumber = (cards = null) => {\n  let nextNumber = -1;\n  for (const id in cards) {\n    if (cards[id].number > nextNumber) {\n      nextNumber = cards[id].number;\n    }\n  }\n  return nextNumber + 1;\n};\n\n/**\n * Generate a unique identifier.\n * @return {string} unique ID\n */\nexport const _generateId = () => shortid.generate();","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n/*\n * TODO: Create the Tag component\n *\n * Requirements:\n * - Must be named Tag\n * - Must be a function component\n * - Should render a <span> element with the text\n * - Should return null if no text is provided\n *\n * Tips:\n * - You can use the 'tag' CSS class for styling\n *\n */\nconst Tag = (props) =>\n  props.text ? <span className=\"tag\">{props.text}</span> : null;\n\nTag.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n\nexport default Tag;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n// Components\nimport { Draggable } from \"react-beautiful-dnd\";\nimport Tag from \"./Tag\";\n\n/*\n * TODO: Create the Card component\n *\n * Requirements:\n * - Must be named Card\n * - Must be a function component\n * - Should render a <div> element as the container for the card content\n * - Should render the tags list at the top of the card content\n * - Should render the card number and description below the tags\n *\n * Tips:\n * - You can use the 'card' CSS class for styling\n *\n * [BONUS]:\n * - Wrap the card inside the <Draggable> component\n * --> https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/api/draggable.md\n * - Add the draggableId prop to it (should be the card ID)\n * - Add the index prop to it (should be the card index)\n * - Add the children function that returns your card component and bind everything together\n * --> https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/api/draggable.md#children-function-render-props--function-as-child\n */\nconst Card = (props) => (\n  <Draggable draggableId={props.id} index={props.index}>\n    {(provided) => (\n      <div\n        className=\"card\"\n        ref={provided.innerRef}\n        {...provided.draggableProps}\n        {...provided.dragHandleProps}\n      >\n        {/* render tags list */}\n        <div style={{ marginBottom: \"5px\" }}>\n          {props.tags.map((tag, index) => (\n            <Tag key={index} text={tag} />\n          ))}\n        </div>\n        {/* render card number and description */}\n        <p\n          style={{ margin: \"0px\" }}\n        >{`#${props.number} ${props.description}`}</p>\n      </div>\n    )}\n  </Draggable>\n);\n\nCard.propTypes = {\n  id: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  number: PropTypes.number.isRequired,\n  description: PropTypes.string,\n  tags: PropTypes.arrayOf(PropTypes.string),\n};\n\nexport default Card;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n/*\n * TODO: Create the Button component\n *\n * Requirements:\n * - Must be named Button\n * - Must be a function component\n * - Should render a <button> element\n * - Should render a <span> element inside the <button> for the text\n * - Should render an optional icon (from react-icons) before the text\n *\n * Tips:\n * - You can use the 'btn' and 'btn-success' CSS classes for styling\n *\n */\nconst Button = (props) => (\n  <button className={`btn btn-${props.variant}`} onClick={props.onClick}>\n    {props.icon ?? null}\n    <span>{props.text}</span>\n  </button>\n);\n\nButton.propTypes = {\n  text: PropTypes.string.isRequired,\n  icon: PropTypes.node,\n  onClick: PropTypes.func,\n  variant: PropTypes.oneOf([\"success\", \"editor\"]),\n};\n\nexport default Button;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n// Icons\nimport { IoMdClose as CancelIcon } from \"react-icons/io\";\n// Components\nimport Button from \"./Button\";\n\n/*\n * TODO: Create the Form component\n *\n * Requirements:\n * - Must be named Form\n * - Must be a class component\n * - Should implement all the methods defined below\n * - Should render a form element\n * - Should either render an input or a textarea element\n * - Should render a submit button\n * - Should render a cancel icon (optional)\n *\n * Tips:\n * - You can use the 'form' and 'form-*' CSS classes for styling\n *\n */\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n\n    // Refs to access form and control input/textarea DOM nodes\n    this.formRef = React.createRef();\n    this.controlRef = React.createRef();\n\n    // TODO: Define your state properties here\n    this.state = {\n      text: props.initialValue,\n    };\n\n    // TODO: Bind your class methods here\n    // ...\n    this.handleOnChangeText = this.handleOnChangeText.bind(this);\n    this.handleOnSubmit = this.handleOnSubmit.bind(this);\n    this.handleOnKeyDown = this.handleOnKeyDown.bind(this);\n  }\n\n  // TODO: implement the componentDidMount lifecycle method to set focus on the form control element.\n  // Tips:\n  // - Call the `focus` method on the control ref node `this.controlRef.current`\n  componentDidMount() {\n    if (this.controlRef.current !== null) {\n      this.controlRef.current.focus();\n    }\n  }\n\n  // TODO: implement the handleOnChangeText event handler.\n  // Tips:\n  // - Use the `this.setState` method to update the text value of the control from\n  handleOnChangeText(event) {\n    this.setState({\n      text: event.target.value,\n    });\n  }\n\n  // TODO: implement the handleOnSubmit event handler.\n  // Tips:\n  // - Use the `preventDefault` method to prevent the default action\n  // - Call the `this.props.onClickSubmit` method to submit the text\n  // - Clean up the control form value using `this.setState`\n  handleOnSubmit(event) {\n    event.preventDefault();\n    this.props.onClickSubmit(this.state.text);\n    this.setState({\n      text: \"\",\n    });\n  }\n\n  // TODO: implement the handleOnKeyDown event handler.\n  // Tips:\n  // - Use the `key` attribute from the event to check if the user has pressed \"Enter\" on the keyboard\n  // - Call the `this.handleOnSubmit` if the user pressed \"Enter\"\n  handleOnKeyDown(event) {\n    if (event.key === \"Enter\") {\n      this.handleOnSubmit(event);\n    }\n  }\n\n  // TODO: render the Form UI.\n  render() {\n    return (\n      <form ref={this.formRef} className={`form form-${this.props.type}`}>\n        {/* render form control: input or textarea */}\n        {this.props.type === \"list\" || this.props.type === \"labels\" ? (\n          <input\n            type=\"text\"\n            value={this.state.text}\n            placeholder={this.props.placeholder}\n            onChange={this.handleOnChangeText}\n            className=\"form-input\"\n            ref={this.controlRef}\n          />\n        ) : (\n          <textarea\n            type=\"text\"\n            value={this.state.text}\n            placeholder={this.props.placeholder}\n            onChange={this.handleOnChangeText}\n            className=\"form-textarea\"\n            onKeyDown={this.handleOnKeyDown}\n            ref={this.controlRef}\n          />\n        )}\n        <div className=\"form-actions\">\n          {/* render submit button */}\n          <Button\n            text={this.props.buttonText}\n            onClick={this.handleOnSubmit}\n            variant=\"success\"\n          />\n          {/* render cancel icon */}\n          {this.props.onClickCancel && (\n            <CancelIcon\n              className=\"form-cancel-action\"\n              onClick={this.props.onClickCancel}\n            />\n          )}\n        </div>\n      </form>\n    );\n  }\n}\n\nForm.defaultProps = {\n  initialValue: \"\",\n  placeholder: \"\",\n  buttonText: \"\",\n  onClickSubmit: () => null,\n};\n\nForm.propTypes = {\n  type: PropTypes.oneOf([\"list\", \"card\", \"editor\", \"labels\"]).isRequired,\n  initialValue: PropTypes.string,\n  placeholder: PropTypes.string,\n  buttonText: PropTypes.string,\n  onClickSubmit: PropTypes.func,\n  onClickCancel: PropTypes.func,\n};\n\nexport default Form;\n","import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useClickOutsideEffect } from '../hooks';\n\nconst Popover = ({ title = '', children = null, onClickOutside = () => null, offset = {}}) => {\n  const popover = useRef(null);\n\n  useClickOutsideEffect(popover, onClickOutside);\n\n  return (\n    <div\n      ref={popover}\n      className=\"popover\"\n      style={{\n        marginTop: `${offset?.top ?? 0}px`,\n        marginLeft: `${offset?.left ?? 0}px`\n      }}\n    >\n      {\n        title ? (\n          <>\n            <div className=\"popover-header\">\n              <h4>{title}</h4>\n            </div>\n            <hr className=\"divider\" />\n          </>\n        ) : null\n      }\n      {children}\n    </div>\n  );\n};\n\nPopover.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node\n  ]),\n  onClickOutside: PropTypes.func,\n  offset: PropTypes.exact({\n    top: PropTypes.number,\n    left: PropTypes.number\n  })\n};\n\nexport default Popover;\n","import { useEffect, useCallback } from 'react';\n\nexport function useClickOutsideEffect(node, onClickOutside) {\n  const handleClick = useCallback((e) => {\n    if (!node?.current?.contains(e.target) && typeof(onClickOutside) === \"function\") {\n      onClickOutside();\n    }\n  }, [node, onClickOutside]);\n\n  useEffect(() => {\n    document.addEventListener('mousedown', handleClick);\n\n    return () => {\n      document.removeEventListener('mousedown', handleClick);\n    };\n  }, [handleClick]);\n};\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n// Icons\nimport {\n  IoMdCopy as CopyIcon,\n  IoMdArchive as ArchiveIcon,\n  IoMdCreate as EditIcon,\n  IoMdClose as RemoveIcon,\n} from \"react-icons/io\";\n// Components\nimport Button from \"./Button\";\nimport Form from \"./Form\";\nimport Popover from \"./Popover\";\n\n/*\n * TODO: Create the CardEditor component\n *\n * Requirements:\n * - Must be named CardEditor\n * - Must be a class component\n * - Should render a Form component to edit the card description (that contain a textarea and a submit button)\n * - Should render a list of buttons for all editing actions (edit labels, copy, archive)\n * - Should render a Popover component for displaying the label editing form:\n *    - Should render the list of tags\n *    - Should render an icon next to each tag to let the user remove each tag individually\n *    - Should render a Form component to add a new tag (that contain an input and a submit button)\n *\n * Tips:\n * - You can use the 'editor-modal' and 'editor-actions' CSS classes for styling\n *\n */\nclass CardEditor extends Component {\n  constructor(props) {\n    super(props);\n\n    this.editorRef = React.createRef();\n\n    // TODO: Define your state properties here\n    this.state = {\n      isLabelEditOpen: false,\n      closeOnlyLabel: false,\n    };\n\n    this.handleOutsideClick = this.handleOutsideClick.bind(this);\n  }\n\n  handleOutsideClick(event) {\n    if (this.editorRef.current.contains(event.target)) {\n      return;\n    }\n    if (!this.state.closeOnlyLabel) {\n      this.props.onClickOutside();\n    } else {\n      this.setState({\n        closeOnlyLabel: false,\n      });\n    }\n  }\n\n  // TODO: render the CardEditor UI.\n  render() {\n    return (\n      <div className=\"editor-modal\" onClick={this.handleOutsideClick}>\n        <div\n          ref={this.editorRef}\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            position: \"absolute\",\n            top: `${this.props?.position?.top ?? 0}px`,\n            left: `${this.props?.position?.left ?? 0}px`,\n          }}\n        >\n          <div>\n            {/* render editor form */}\n            <Form\n              type=\"editor\"\n              initialValue={this.props.initialValue}\n              buttonText=\"Save\"\n              onClickSubmit={this.props.onSaveCard}\n            />\n          </div>\n          <ul className=\"editor-actions\">\n            {/* render editor actions */}\n            <li className=\"editor-action\">\n              <Button\n                text=\"Edit Labels\"\n                icon={<EditIcon />}\n                variant=\"editor\"\n                onClick={() => this.setState({ isLabelEditOpen: true })}\n              />\n            </li>\n            <li className=\"editor-action\">\n              <Button\n                text=\"Copy\"\n                icon={<CopyIcon />}\n                variant=\"editor\"\n                onClick={this.props.onCopyCard}\n              />\n            </li>\n            <li className=\"editor-action\">\n              <Button\n                text=\"Archive\"\n                icon={<ArchiveIcon />}\n                variant=\"editor\"\n                onClick={this.props.onArchiveCard}\n              />\n            </li>\n            {/* render tags editing form */}\n            {this.state.isLabelEditOpen && (\n              <Popover\n                title=\"Labels\"\n                onClickOutside={() =>\n                  this.setState({\n                    isLabelEditOpen: false,\n                    closeOnlyLabel: true,\n                  })\n                }\n                offset={{ top: -119 }}\n              >\n                <div>\n                  <ul className=\"labels\">\n                    {this.props.tags.map((tag, index) => (\n                      <li\n                        key={index}\n                        className=\"label\"\n                        onClick={() => this.props.onRemoveTag(index)}\n                      >\n                        <RemoveIcon />\n                        <p>{tag}</p>\n                      </li>\n                    ))}\n                  </ul>\n                  <h4 className=\"new-label-title\">Add a new label</h4>\n                  <Form\n                    type=\"labels\"\n                    placeholder=\"Enter a name for this label...\"\n                    buttonText=\"Add\"\n                    onClickSubmit={this.props.onAddTag}\n                  />\n                </div>\n              </Popover>\n            )}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nCardEditor.defaultProps = {\n  initialValue: \"\",\n  tags: [],\n  position: null,\n  onSaveCard: () => null,\n  onRemoveTag: () => null,\n  onAddTag: () => null,\n  onCopyCard: () => null,\n  onArchiveCard: () => null,\n  onClickOutside: () => null,\n};\n\nCardEditor.propTypes = {\n  initialValue: PropTypes.string,\n  tags: PropTypes.arrayOf(PropTypes.string),\n  position: PropTypes.exact({\n    top: PropTypes.number,\n    left: PropTypes.number,\n  }),\n  onSaveCard: PropTypes.func,\n  onRemoveTag: PropTypes.func,\n  onAddTag: PropTypes.func,\n  onCopyCard: PropTypes.func,\n  onArchiveCard: PropTypes.func,\n  onClickOutside: PropTypes.func,\n};\n\nexport default CardEditor;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n// Icons\nimport { IoIosMore as MenuIcon } from \"react-icons/io\";\n// Components\nimport Popover from \"./Popover\";\n\n/*\n * TODO: Create the Menu component\n *\n * Requirements:\n * - Must be named Menu\n * - Must be a function component\n * - Should render a <div> element as the container for the menu content\n * - Should render an icon the user can click to open/close the menu\n * - Should render the lists of actions inside a Popover component if the menu is open\n * - The Popover component should be mounted only if the menu is open\n * - Each list of actions should be separated by an horizontal line (use a <hr> element)\n *\n * Tips:\n * - You can use the 'menu' CSS class for styling\n *\n */\nconst Menu = (props) => (\n  <div className=\"menu\">\n    {/* render the menu icon */}\n    <MenuIcon onClick={props.onClick} />\n    {/* render the lists of actions */}\n    {props.isOpen && (\n      <Popover title=\"List Actions\" onClickOutside={props.onClick}>\n        {props.actions.map((action, actionsIndex) => (\n          <div key={actionsIndex}>\n            <ul className=\"menu-actions\">\n              {action.map(({ title, onClick }, actionIndex) => (\n                <li className=\"menu-action\" key={actionIndex} onClick={onClick}>\n                  <p>{title}</p>\n                </li>\n              ))}\n            </ul>\n            <hr className=\"divider\" />\n          </div>\n        ))}\n      </Popover>\n    )}\n  </div>\n);\n\nMenu.propTypes = {\n  isOpen: PropTypes.bool,\n  onClick: PropTypes.func,\n  actions: PropTypes.arrayOf(\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        onClick: PropTypes.func,\n        title: PropTypes.string.isRequired,\n      })\n    )\n  ),\n};\n\nexport default Menu;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n// Icons\nimport { IoMdAdd as AddIcon } from \"react-icons/io\";\n// Components\nimport { Droppable, Draggable } from \"react-beautiful-dnd\";\nimport Card from \"./Card\";\nimport CardEditor from \"./CardEditor\";\nimport Menu from \"./Menu\";\nimport Form from \"./Form\";\n\n/*\n * TODO: Create the CardsList component\n *\n * Requirements:\n * - Must be named CardsList\n * - Must be a class component\n * - Should render a <div> element as the container for the card\n * - Should render the tags list at the top of the card content\n * - Should render the card number and description below the tags\n *\n * Tips:\n * - You can use the 'card' CSS class for styling\n *\n */\nclass CardsList extends Component {\n  constructor(props) {\n    super(props);\n\n    // CardsList state\n    this.state = {\n      creatingNewCard: false,\n      editCardId: null,\n      editCardText: \"\",\n      editCardTags: [],\n    };\n\n    this.cardRefs = {};\n\n    // TODO: Define all the card actions here\n    this.actions = [\n      [\n        {\n          title: \"Add Card...\",\n          onClick: () => {\n            this.props.onToggleMenu(this.props.id);\n            this.setState({ creatingNewCard: true });\n          }, // TODO // done\n        },\n        {\n          title: \"Copy List...\",\n          onClick: () => this.props.onCopyList(this.props.id), // TODO //done\n        },\n      ],\n      [\n        {\n          title: \"Move All Cards in This List...\",\n          onClick: () => this.props.onMoveAllCards(this.props.id), // TODO // done\n        },\n        {\n          title: \"Archive All Cards in This List...\",\n          onClick: () => this.props.onRemoveAllCards(this.props.id), // TODO // done\n        },\n      ],\n      [\n        {\n          title: \"Archive This List\",\n          onClick: () => this.props.onRemoveList(this.props.id), // TODO // done\n        },\n      ],\n    ];\n\n    // TODO: Bind your class methods here\n    // ...\n    this.handleAddNewCard = this.handleAddNewCard.bind(this); // done\n    this.handleCancelNewCard = this.handleCancelNewCard.bind(this); // done\n    this.handleCreateNewCard = this.handleCreateNewCard.bind(this); // done\n    this.handleEditCard = this.handleEditCard.bind(this);\n    this.handleCancelEdit = this.handleCancelEdit.bind(this);\n    this.handleCopyCard = this.handleCopyCard.bind(this);\n    this.handleSaveCard = this.handleSaveCard.bind(this);\n    this.handleArchiveCard = this.handleArchiveCard.bind(this);\n    this.handleRemoveTag = this.handleRemoveTag.bind(this);\n    this.handleAddTag = this.handleAddTag.bind(this);\n  }\n\n  // TODO: implement the handleAddNewCard method to add a new card to the list.\n  // Tips:\n  // - Call the `this.props.onAddCard` function to add a new card\n  // - Use the `this.setState` method to update the state in order to close the card creation form\n  handleAddNewCard(cardText = \"\") {\n    if (cardText) {\n      this.props.onAddCard(this.props.id, cardText);\n    }\n    this.handleCancelNewCard();\n  }\n\n  // TODO: implement the handleCancelNewCard method.\n  // Tips:\n  // - Use the `this.setState` method to update the state in order to close the card creation form\n  handleCancelNewCard() {\n    this.setState({ creatingNewCard: false });\n  }\n\n  // TODO: implement the handleCreateNewCard method.\n  // Tips:\n  // - Use the `this.setState` method to update the state in order to open the card creation form\n  handleCreateNewCard() {\n    this.setState({ creatingNewCard: true });\n  }\n\n  // TODO: implement the handleEditCard method.\n  // Tips:\n  // - Use the `this.setState` method to update the text and tags values of the editing from\n  handleEditCard(id, text, tags) {\n    this.setState({\n      editCardId: id,\n      editCardText: text,\n      editCardTags: tags,\n    });\n  }\n\n  // TODO: implement the handleCancelEdit method.\n  // Tips:\n  // - Use the `this.setState` method to reset and close the editing form\n  handleCancelEdit() {\n    this.setState({\n      editCardId: null,\n      editCardText: \"\",\n      editCardTags: [],\n    });\n  }\n\n  // TODO: implement the handleCopyCard method.\n  // Tips:\n  // - Call the `this.props.onCopyCard` function to clone a card\n  // - Do not forget to reset and close the editing form\n  handleCopyCard() {\n    this.props.onCopyCard(this.props.id, this.state.editCardId);\n    this.handleCancelEdit();\n  }\n\n  // TODO: implement the handleArchiveCard method.\n  // Tips:\n  // - Call the `this.props.onRemoveCard` function to remove a card form the list\n  // - Do not forget to reset and close the editing form\n  handleArchiveCard() {\n    this.props.onRemoveCard(this.props.id, this.state.editCardId);\n    this.handleCancelEdit();\n  }\n\n  // TODO: implement the handleSaveCard method.\n  // Tips:\n  // - Call the `this.props.onEditCard` function to save changes on the card\n  // - Do not forget to reset and close the editing form\n  handleSaveCard(text) {\n    this.props.onEditCard(this.state.editCardId, text);\n    this.handleCancelEdit();\n  }\n\n  // TODO: implement the handleRemoveTag method.\n  // Tips:\n  // - Call the `this.props.onRemoveTag` function to remove a tag from a card\n  handleRemoveTag(tagId) {\n    this.props.onRemoveTag(this.state.editCardId, tagId);\n  }\n\n  // TODO: implement the handleAddTag method.\n  // Tips:\n  // - Call the `this.props.onAddTag` function to add a tag to a card\n  handleAddTag(text) {\n    if (text) {\n      this.props.onAddTag(this.state.editCardId, text);\n    }\n  }\n\n  // TODO: implement the renderHeader method to render the list header UI.\n  // Tips:\n  // - Should render a h3 tag for the list title\n  // - Should render a Menu component\n  // - Should render the number of cards in the list\n  //\n  // [BONUS]:\n  // - Add a drag handle to the list header so that user can grab the list and drag it around\n  // (using the dragHandleProps)\n  renderHeader(provided) {\n    const { title, cards } = this.props;\n    return (\n      <div className=\"cards-list-header\" {...provided.dragHandleProps}>\n        <div className=\"cards-list-title\">\n          {/* render the list title */}\n          <h3>{title}</h3>\n          {/* render the Menu component */}\n          <Menu\n            isOpen={this.props.isMenuOpen}\n            onClick={() => this.props.onToggleMenu(this.props.id)}\n            actions={this.actions}\n          />\n        </div>\n        {/* render the number of cards in this list */}\n        <p>{cards.length} cards</p>\n      </div>\n    );\n  }\n\n  // TODO: implement the renderCards method to render the cards.\n  // Tips:\n  // - Iterate through this.props.cards to render each Card\n  //\n  // [BONUS]:\n  // - Wrap the cards inside the <Droppable> component\n  // --> https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/api/droppable.md\n  // - Add the droppableId prop to it (should be the list ID)\n  // - Add the direction prop to it (should be 'vertical')\n  // - Add the type prop to it (should be 'card')\n  // - Add the children function that returns your cards and bind everything together\n  // --> https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/api/droppable.md#children-function\n  renderCards() {\n    return (\n      <Droppable droppableId={this.props.id} type=\"card\" direction=\"vertical\">\n        {(provided) => (\n          <ul\n            className=\"cards\"\n            ref={provided.innerRef}\n            {...provided.droppableProps}\n          >\n            {\n              /* render the cards */\n              this.props.cards.map(\n                ({ id, number, description, tags }, index) => (\n                  <li\n                    key={id}\n                    onClick={() => this.handleEditCard(id, description, tags)}\n                    ref={(node) => {\n                      if (node) {\n                        this.cardRefs[id] = node;\n                      }\n                    }}\n                  >\n                    <Card\n                      id={id}\n                      index={index}\n                      number={number}\n                      description={description}\n                      tags={tags}\n                    />\n                  </li>\n                )\n              )\n            }\n            {provided.placeholder}\n          </ul>\n        )}\n      </Droppable>\n    );\n  }\n\n  // TODO: implement the renderFooter method to render the list footer UI.\n  // Tips:\n  // - Should render either a Form component to create a new card\n  // or a button to trigger the card creation mode (creatingNewCard)\n  renderFooter() {\n    return this.state.creatingNewCard ? (\n      <Form\n        type=\"card\"\n        placeholder=\"Enter a title for this card...\"\n        buttonText=\"Add Card\"\n        onClickSubmit={this.handleAddNewCard}\n        onClickCancel={this.handleCancelNewCard}\n      />\n    ) : (\n      <button\n        className=\"add-button add-card-button\"\n        onClick={this.handleCreateNewCard}\n      >\n        <AddIcon />\n        <p>Add a new card</p>\n      </button>\n    );\n  }\n\n  // TODO: render the CardsList UI.\n  //\n  // [BONUS]:\n  // - Wrap the cards list inside the <Draggable> component\n  // --> https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/api/draggable.md\n  // - Add the draggableId prop to it (should be the list ID)\n  // - Add the index prop to it (should be the list index)\n  // - Add the children function that returns your cards list component and bind everything together\n  // --> https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/api/draggable.md#children-function-render-props--function-as-child\n  render() {\n    return (\n      <Draggable draggableId={this.props.id} index={this.props.index}>\n        {(provided) => (\n          <div\n            className=\"cards-list\"\n            ref={provided.innerRef}\n            {...provided.draggableProps}\n          >\n            {/* render list header */}\n            {this.renderHeader(provided)}\n            {/* render cards */}\n            {this.renderCards()}\n            {/* render list footer */}\n            {this.renderFooter()}\n            {/* render card editor */}\n            {this.state.editCardId && (\n              <CardEditor\n                initialValue={this.state.editCardText}\n                tags={this.state.editCardTags}\n                position={{\n                  top: this.cardRefs[\n                    this.state.editCardId\n                  ].getBoundingClientRect().top,\n                  left: this.cardRefs[\n                    this.state.editCardId\n                  ].getBoundingClientRect().left,\n                }}\n                onSaveCard={this.handleSaveCard}\n                onRemoveTag={this.handleRemoveTag}\n                onAddTag={this.handleAddTag}\n                onCopyCard={this.handleCopyCard}\n                onArchiveCard={this.handleArchiveCard}\n                onClickOutside={() => this.handleCancelEdit()}\n              />\n            )}\n          </div>\n        )}\n      </Draggable>\n    );\n  }\n}\n\nCardsList.defaultProps = {\n  cards: null,\n  isMenuOpen: false,\n  onToggleMenu: () => null,\n  onAddCard: () => null,\n  onRemoveCard: () => null,\n  onRemoveList: () => null,\n  onRemoveAllCards: () => null,\n  onCopyList: () => null,\n  onMoveAllCards: () => null,\n  onCopyCard: () => null,\n  onEditCard: () => null,\n  onRemoveTag: () => null,\n  onAddTag: () => null,\n};\n\nCardsList.propTypes = {\n  id: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  cards: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string.isRequired,\n      number: PropTypes.number.isRequired,\n      description: PropTypes.string,\n      tags: PropTypes.arrayOf(PropTypes.string),\n    })\n  ),\n  isMenuOpen: PropTypes.bool,\n  onToggleMenu: PropTypes.func,\n  onAddCard: PropTypes.func,\n  onRemoveCard: PropTypes.func,\n  onRemoveList: PropTypes.func,\n  onRemoveAllCards: PropTypes.func,\n  onCopyList: PropTypes.func,\n  onMoveAllCards: PropTypes.func,\n  onCopyCard: PropTypes.func,\n  onEditCard: PropTypes.func,\n  onRemoveTag: PropTypes.func,\n  onAddTag: PropTypes.func,\n};\n\nexport default CardsList;\n","const data = {\n  cards: {\n    \"k9atfadyp\": { \n      id: \"k9atfadyp\", \n      number: 1, \n      description: \"Create reusable React components\", \n      tags: [\"Priority: Medium\", \"React\"] \n    },\n    \"8wu6w8mxg\": { \n      id: \"8wu6w8mxg\", \n      number: 2, \n      description: \"Learn React Hooks\", \n      tags: [\"React\", \"Hooks\"] \n    },\n    \"c96h9478v\": { \n      id: \"c96h9478v\", \n      number: 3, \n      description: \"Create Beautiful Drag and Drop Capability\", \n      tags: [\"Priority: Low\", \"react-beautiful-dnd\"]\n    },\n    \"rtwf8u120\": { \n      id: \"rtwf8u120\", \n      number: 4,\n      description: \"Learn React\", \n      tags: [\"Priority: High\", \"React\"] \n    },\n    \"vt6udjrpz\": { \n      id: \"vt6udjrpz\", \n      number: 5, \n      description: \"Write my first React component\", \n      tags: [\"Priority: Medium\"] \n    },\n    \"ftrch98nt\": { \n      id: \"ftrch98nt\", \n      number: 6, \n      description: \"Create React App\", \n      tags: [\"Priority: Medium\", \"create-react-app\"] \n    },\n    \"bionb64f7\": { \n      id: \"bionb64f7\", \n      number: 7, \n      description: \"Write my first React component\", \n      tags: [\"Priority: Medium\"] \n    }\n  },\n  lists: {\n    \"f0y88ej8u\": { \n      id: \"f0y88ej8u\",\n      title: \"Product Backlog\",\n      cardIds: [\"k9atfadyp\", \"8wu6w8mxg\", \"c96h9478v\"]\n    },\n    \"1528b8oyp\": {\n      id: \"1528b8oyp\",\n      title: \"Work In Progress\",\n      cardIds: [\"rtwf8u120\", \"vt6udjrpz\"]\n    },\n    \"yu0myoowp\": {\n      id: \"yu0myoowp\",\n      title: \"Done\",\n      cardIds: [\"ftrch98nt\", \"bionb64f7\"]\n    }\n  },\n  listOrder: [\"f0y88ej8u\", \"1528b8oyp\", \"yu0myoowp\"]\n};\n\nexport default data;\n","import React, { Component } from \"react\";\nimport { _getNextNumber, _generateId } from \"../utils\";\n// Icons\nimport { IoMdAdd as AddIcon } from \"react-icons/io\";\n// Components\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport CardsList from \"./CardsList\";\nimport Form from \"./Form\";\n\nimport data from \"../data\";\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n\n    // Board state\n    this.state = {\n      lists: {},\n      cards: {},\n      listOrder: [],\n      newListText: \"\",\n      creatingNewList: false,\n      openMenuId: null,\n    };\n\n    // TODO: Bind your class methods here\n    // ...\n    this.handleAddList = this.handleAddList.bind(this); // done\n    this.handleRemoveList = this.handleRemoveList.bind(this); // done\n    this.handleAddCard = this.handleAddCard.bind(this); // done\n    this.handleRemoveCard = this.handleRemoveCard.bind(this); // done\n    this.handleRemoveAllCards = this.handleRemoveAllCards.bind(this); // done\n    this.handleCopyCard = this.handleCopyCard.bind(this); // done\n    this.handleCopyList = this.handleCopyList.bind(this); // done\n    this.handleMoveAllCards = this.handleMoveAllCards.bind(this); // done\n    this.handleToggleMenu = this.handleToggleMenu.bind(this); // done\n    this.handleEditCard = this.handleEditCard.bind(this); // done\n    this.handleRemoveTag = this.handleRemoveTag.bind(this); // done\n    this.handleAddTag = this.handleAddTag.bind(this); // done\n    this.handleDragEnd = this.handleDragEnd.bind(this);\n    this.renderLists = this.renderLists.bind(this); // done\n  }\n\n  // TODO: implement the componentDidMount lifecycle method to fetch data and init the component state.\n  // Tips:\n  // - Use the `this.setState` method to update the component state\n  componentDidMount() {\n    this.setState({\n      lists: data.lists,\n      cards: data.cards,\n      listOrder: data.listOrder,\n    });\n  }\n\n  // TODO: implement the handleAddList method to add a new list to the board.\n  // Tips:\n  // - Check if the list title is not an empty string. Do not create the list otherwise\n  // - Use the `_generateId` function to generate a unique Id for the new list\n  // - Add the new list\n  // - Use the `this.setState` method to update the state (lists, listOrder, newListText, creatingNewList)\n  // - Reset the `newListText` and `creatingNewList` state values as well to cleanup and close the form\n  handleAddList(title = \"\") {\n    if (title.trim()) {\n      const id = _generateId();\n      const { lists, listOrder } = this.state;\n      lists[id] = { id, title, cardIds: [] };\n      listOrder.push(id);\n      this.setState({\n        lists,\n        listOrder,\n        newListText: \"\",\n        creatingNewList: false,\n      });\n    } else {\n      this.setState({ newListText: \"\", creatingNewList: false });\n    }\n  }\n\n  // TODO: implement the handleRemoveList method to remove a list from the board.\n  // Tips:\n  // - Delete all cards from the list\n  // - Delete list itself\n  // - Use the `this.setState` method to update the state (lists, cards, listOrder)\n  handleRemoveList(listId) {\n    const { lists, listOrder, cards } = this.state;\n    lists[listId].cardIds.map((id) => delete cards[id]);\n    delete lists[listId];\n    const index = listOrder.indexOf(listId);\n    if (index > -1) {\n      listOrder.splice(index, 1);\n    }\n\n    this.setState({\n      lists,\n      cards,\n      listOrder,\n    });\n  }\n\n  // TODO: implement the handleAddCard method to add a card to a list.\n  // Tips:\n  // - Check if the card description is not an empty string. Do not create the card otherwise\n  // - Use the `_generateId` function to generate a unique Id for the new card\n  // - Use the `_getNextNumber` function to get the new card number\n  // - Add the new card\n  // - Use the `this.setState` method to update the state (lists, cards)\n  handleAddCard(listId, description = \"\") {\n    if (description.trim()) {\n      const { lists, cards } = this.state;\n      const id = _generateId();\n      const number = _getNextNumber(cards);\n      cards[id] = {\n        id,\n        number,\n        description,\n        tags: [],\n      };\n      lists[listId].cardIds.push(id);\n      this.setState({\n        lists,\n        cards,\n      });\n    }\n  }\n\n  // TODO: implement the handleRemoveCard method to remove a card from a list.\n  // Tips:\n  // - Delete card\n  // - Remove card Id from the corresponding list\n  // - Use the `this.setState` method to update the state (lists, cards)\n  handleRemoveCard(listId, cardId) {\n    const { lists, cards } = this.state;\n    delete cards[cardId];\n    const cardIndex = lists[listId].cardIds.indexOf(cardId);\n    if (cardIndex > -1) {\n      lists[listId].cardIds.splice(cardIndex, 1);\n    }\n    this.setState({ lists, cards });\n  }\n\n  // TODO: implement the handleRemoveAllCards method to remove all cards from a list.\n  // Tips:\n  // - Delete all cards from the corresponding list\n  // - Remove card Ids from the list\n  // - Use the `this.setState` method to update the state (lists, cards, openMenuId)\n  // - Close the opened menu by reseting the openMenuId state value\n  handleRemoveAllCards(listId) {\n    const { lists, cards } = this.state;\n    lists[listId].cardIds.map((id) => delete cards[id]);\n    lists[listId].cardIds = [];\n\n    this.setState({\n      lists,\n      cards,\n      openMenuId: null,\n    });\n  }\n\n  // TODO: implement the handleCopyCard method to copy a card from a list to another.\n  // Tips:\n  // - Create card copy\n  // - Use the `_generateId` function to generate a unique Id for the new card\n  // - Use the `_getNextNumber` function to get the new card number\n  // - Add it to the list\n  // - Use the `this.setState` method to update the state (lists, cards)\n  handleCopyCard(listId, cardId) {\n    const { lists, cards } = this.state;\n    const id = _generateId();\n    const number = _getNextNumber(cards);\n    cards[id] = {\n      id,\n      number,\n      description: cards[cardId].description,\n      tags: cards[cardId].tags,\n    };\n    lists[listId].cardIds.push(id);\n\n    this.setState({\n      lists,\n      cards,\n    });\n  }\n\n  // TODO: implement the handleCopyList method to clone an entire list.\n  // Tips:\n  // - Copy all cards from list to clone\n  // - Use the `_generateId` function to generate a unique Id for every cloned cards\n  // - Use the `_getNextNumber` function to get a new card number for every cloned cards\n  // - Create a new list and add all the cloned cards\n  // - Use the `_generateId` function to generate a unique Id for the new list\n  // - Edit the new list title to append '(Copy) - ' to it\n  // - Use the `this.setState` method to update the state (lists, cards, listOrder, openMenuId)\n  // - Close the opened menu by reseting the openMenuId state value\n  handleCopyList(listId) {\n    const { lists, cards, listOrder } = this.state;\n    const clonedCards = lists[listId].cardIds.map((id) => {\n      const card = cards[id];\n      const newId = _generateId();\n      const newNumber = _getNextNumber(cards);\n      cards[newId] = {\n        id: newId,\n        number: newNumber,\n        description: card.description,\n        tags: card.tags,\n      };\n      return newId;\n    });\n    const newListId = _generateId();\n    lists[newListId] = {\n      id: newListId,\n      title: `(Copy) - ${lists[listId].title}`,\n      cardIds: clonedCards,\n    };\n    listOrder.push(newListId);\n    this.setState({\n      lists,\n      cards,\n      listOrder,\n      openMenuId: null,\n    });\n  }\n\n  // TODO: implement the handleMoveAllCards method to move all cards to a list.\n  // Tips:\n  // - Update all the lists\n  // - The target list should get all the cards. The other lists should be emptied\n  // - Use the `this.setState` method to update the state (lists, openMenuId)\n  // - Close the opened menu by reseting the openMenuId state value\n  handleMoveAllCards(listId) {\n    const { lists, cards } = this.state;\n    for (let id in lists) {\n      if (id === listId) {\n        lists[id].cardIds = Object.keys(cards);\n      } else {\n        lists[id].cardIds = [];\n      }\n    }\n\n    this.setState({\n      lists,\n      openMenuId: null,\n    });\n  }\n\n  // TODO: implement the handleToggleMenu method to toggle the corresponding list menu.\n  // Tips:\n  // - Use the `this.setState` method to update the state (openMenuId)\n  handleToggleMenu(listId) {\n    this.setState({\n      openMenuId: this.state.openMenuId !== listId ? listId : null,\n    });\n  }\n\n  // TODO: implement the handleEditCard method to update the card description.\n  // Tips:\n  // - Use the `this.setState` method to update the state (cards)\n  handleEditCard(cardId, description = \"\") {\n    const { cards } = this.state;\n    cards[cardId].description = description;\n    this.setState({\n      cards,\n    });\n  }\n\n  // TODO: implement the handleRemoveTag method to remove a tag from a card.\n  // Tips:\n  // - Use the `this.setState` method to update the state (cards)\n  handleRemoveTag(cardId, tagId) {\n    const { cards } = this.state;\n    cards[cardId].tags.splice(tagId, 1);\n    this.setState({ cards });\n  }\n\n  // TODO: implement the handleAddTag method to add a tag to a card.\n  // Tips:\n  // - Use the `this.setState` method to update the state (cards)\n  handleAddTag(cardId, text = \"\") {\n    const { cards } = this.state;\n    cards[cardId].tags.push(text);\n    this.setState({ cards });\n  }\n\n  // [BONUS]: implement the handleDragEnd method to persist list and card reordering\n  // Tips:\n  // - Check if the element has been dropped inside the droppable context (using destination). If not, ignore droppping\n  // - Check if the element has been dropped in a new location (using droppableId from destination and source). If not, ignore droppping\n  // - Handle both type of draggable (list and card) by checking the value of type\n  // - Re-order cards inside the list if type equals 'card'. Use the `this.setState` method to update the state (lists)\n  // - Re-order lists inside the board if type equals 'list'. Use the `this.setState` method to update the state (listOrder)\n  handleDragEnd({ destination, source, draggableId, type }) {\n    if (!destination) {\n      return;\n    }\n\n    if (\n      source.droppableId === destination.droppableId &&\n      source.index === destination.index\n    ) {\n      return;\n    }\n\n    if (type === \"list\") {\n      const { listOrder } = this.state;\n      listOrder.splice(source.index, 1);\n      listOrder.splice(destination.index, 0, draggableId);\n      this.setState({ listOrder });\n    } else if (type === \"card\") {\n      const { lists } = this.state;\n      lists[source.droppableId].cardIds.splice(source.index, 1);\n      lists[destination.droppableId].cardIds.splice(\n        destination.index,\n        0,\n        draggableId\n      );\n\n      this.setState({ lists });\n    }\n  }\n\n  // TODO: implement the renderLists method to render the board lists UI.\n  // Tips:\n  // - Iterate through the listOrder state array to render each list of cards (CardsList)\n  // - Pass the necessary methods to the CardsList component to handle all actions\n  //\n  // [BONUS]:\n  // - Wrap the board lists inside the <Droppable> component\n  // --> https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/api/droppable.md\n  // - Add the droppableId prop to it\n  // - Add the direction prop to it (should be 'horizontal')\n  // - Add the type prop to it (should be 'list')\n  // - Add the children function that returns your board lists component and bind everything together\n  // --> https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/api/droppable.md#children-function\n  renderLists() {\n    const { listOrder, lists, cards } = this.state;\n    return (\n      <Droppable\n        droppableId=\"droppable-lists\"\n        direction=\"horizontal\"\n        type=\"list\"\n      >\n        {(provided) => (\n          <ul\n            className=\"board-lists\"\n            ref={provided.innerRef}\n            {...provided.droppableProps}\n          >\n            {/* render the lists */}\n            {listOrder.map((listId, index) => {\n              const orderCards = lists[listId].cardIds.map(\n                (cardId) => cards[cardId]\n              );\n              return (\n                <li key={listId}>\n                  <CardsList\n                    id={listId}\n                    index={index}\n                    title={lists[listId].title}\n                    cards={orderCards}\n                    isMenuOpen={this.state.openMenuId === listId}\n                    onToggleMenu={this.handleToggleMenu}\n                    onAddCard={this.handleAddCard}\n                    onRemoveCard={this.handleRemoveCard}\n                    onRemoveList={this.handleRemoveList}\n                    onRemoveAllCards={this.handleRemoveAllCards}\n                    onCopyList={this.handleCopyList}\n                    onMoveAllCards={this.handleMoveAllCards}\n                    onCopyCard={this.handleCopyCard}\n                    onEditCard={this.handleEditCard}\n                    onRemoveTag={this.handleRemoveTag}\n                    onAddTag={this.handleAddTag}\n                  />\n                </li>\n              );\n            })}\n            {provided.placeholder}\n          </ul>\n        )}\n      </Droppable>\n    );\n  }\n\n  // TODO: implement the renderNewList method to render the list creation form.\n  // Tips:\n  // - Render a Form component in creation mode to let the user enter the new list title\n  // - Otherwise, render a button to trigger the creation mode (creatingNewList)\n  renderNewList() {\n    console.log(this.state.creatingNewList);\n    return this.state.creatingNewList ? (\n      <Form\n        type=\"list\"\n        placeholder=\"Enter a title for this list...\"\n        buttonText=\"Add List\"\n        onClickSubmit={this.handleAddList}\n        onClickCancel={() => this.setState({ creatingNewList: false })}\n      ></Form>\n    ) : (\n      <button\n        className=\"add-button\"\n        onClick={() => this.setState({ creatingNewList: true })}\n      >\n        <AddIcon />\n        <p>Add a new list</p>\n      </button>\n    );\n  }\n\n  // TODO: render the Board UI.\n  //\n  // [BONUS]:\n  // - Wrap the board inside the <DragDropContext> component\n  // --> https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/api/drag-drop-context.md\n  // - Add the onDragEnd prop to the <DragDropContext> component\n  render() {\n    return (\n      <DragDropContext onDragEnd={this.handleDragEnd}>\n        <div className=\"board\">\n          {/* render the lists */}\n          {this.renderLists()}\n          {/* render the list creation form */}\n          {this.renderNewList()}\n        </div>\n      </DragDropContext>\n    );\n  }\n}\n\nexport default Board;\n","import React from 'react';\n\nconst Header = () => (\n  <header className=\"app-header\">\n    <h1>React Trello</h1>\n  </header>\n);\n\nexport default Header;\n","import React from \"react\";\n\nconst Footer = () => (\n  <footer className=\"app-footer\">\n    Looking for help? Head over to the <a href=\"https://discord.com/channels/742753758450155662/748890194136137838\">Discord server</a> and ask the community.\n  </footer>\n);\n\nexport default Footer;\n","import React from \"react\";\n// Components\nimport Board from \"./components/Board\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\n// Stylesheets\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Header />\n      <Board />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}