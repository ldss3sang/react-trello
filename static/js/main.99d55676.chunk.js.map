{"version":3,"sources":["utils.js","components/Tag.js","components/Card.js","components/Button.js","components/Form.js","components/Popover.js","hooks.js","components/CardEditor.js","components/Menu.js","components/CardsList.js","data.js","components/Board.js","components/Header.js","components/Footer.js","App.js","index.js"],"names":["_getNextNumber","cards","nextNumber","id","number","_generateId","shortid","generate","Tag","props","text","className","Card","style","marginBottom","tags","map","tag","index","key","margin","description","Button","variant","onClick","icon","Form","formRef","React","createRef","controlRef","state","initialValue","handleOnChangeText","bind","handleOnSubmit","handleOnKeyDown","this","current","focus","event","setState","target","value","preventDefault","onClickSubmit","ref","type","placeholder","onChange","onKeyDown","buttonText","onClickCancel","Component","defaultProps","Popover","title","children","onClickOutside","offset","popover","useRef","node","handleClick","useCallback","e","contains","useEffect","document","addEventListener","removeEventListener","useClickOutsideEffect","marginTop","top","marginLeft","left","CardEditor","editorRef","isLabelEditOpen","closeOnlyLabel","handleOutsideClick","display","flexDirection","position","onSaveCard","onCopyCard","onArchiveCard","onRemoveTag","onAddTag","Menu","isOpen","actions","action","actionsIndex","actionIndex","CardsList","creatingNewCard","editCardId","editCardText","editCardTags","cardRefs","onToggleMenu","onCopyList","onMoveAllCards","onRemoveAllCards","onRemoveList","handleAddNewCard","handleCancelNewCard","handleCreateNewCard","handleEditCard","handleCancelEdit","handleCopyCard","handleSaveCard","handleArchiveCard","handleRemoveTag","handleAddTag","cardText","onAddCard","onRemoveCard","onEditCard","tagId","isMenuOpen","length","renderHeader","renderCards","renderFooter","getBoundingClientRect","data","lists","cardIds","listOrder","Board","newListText","creatingNewList","openMenuId","handleAddList","handleRemoveList","handleAddCard","handleRemoveCard","handleRemoveAllCards","handleCopyList","handleMoveAllCards","handleToggleMenu","renderLists","trim","push","listId","indexOf","splice","cardId","cardIndex","clonedCards","card","newId","newNumber","newListId","Object","keys","orderCards","console","log","renderNewList","Header","Footer","href","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.99d55676.chunk.js","sourcesContent":["import shortid from 'shortid';\n\n/**\n * Get the next card number.\n * @param {object} cards - all the existing cards\n * @return {number} the next card number\n */\nexport const _getNextNumber = (cards = null) => {\n  let nextNumber = -1;\n  for (const id in cards) {\n    if (cards[id].number > nextNumber) {\n      nextNumber = cards[id].number;\n    }\n  }\n  return nextNumber + 1;\n};\n\n/**\n * Generate a unique identifier.\n * @return {string} unique ID\n */\nexport const _generateId = () => shortid.generate();","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n/*\n * TODO: Create the Tag component\n *\n * Requirements:\n * - Must be named Tag\n * - Must be a function component\n * - Should render a <span> element with the text\n * - Should return null if no text is provided\n *\n * Tips:\n * - You can use the 'tag' CSS class for styling\n *\n */\nconst Tag = (props) =>\n  props.text ? <span className=\"tag\">{props.text}</span> : null;\n\nTag.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n\nexport default Tag;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n// Components\nimport Tag from \"./Tag\";\n\n/*\n * TODO: Create the Card component\n *\n * Requirements:\n * - Must be named Card\n * - Must be a function component\n * - Should render a <div> element as the container for the card content\n * - Should render the tags list at the top of the card content\n * - Should render the card number and description below the tags\n *\n * Tips:\n * - You can use the 'card' CSS class for styling\n *\n */\nconst Card = (props) => (\n  <div className=\"card\">\n    {/* render tags list */}\n    <div style={{ marginBottom: \"5px\" }}>\n      {props.tags.map((tag, index) => (\n        <Tag key={index} text={tag} />\n      ))}\n    </div>\n    {/* render card number and description */}\n    <p style={{ margin: \"0px\" }}>{`#${props.number} ${props.description}`}</p>\n  </div>\n);\n\nCard.propTypes = {\n  id: PropTypes.string.isRequired,\n  number: PropTypes.number.isRequired,\n  description: PropTypes.string,\n  tags: PropTypes.arrayOf(PropTypes.string),\n};\n\nexport default Card;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n/*\n * TODO: Create the Button component\n *\n * Requirements:\n * - Must be named Button\n * - Must be a function component\n * - Should render a <button> element\n * - Should render a <span> element inside the <button> for the text\n * - Should render an optional icon (from react-icons) before the text\n *\n * Tips:\n * - You can use the 'btn' and 'btn-success' CSS classes for styling\n *\n */\nconst Button = (props) => (\n  <button className={`btn btn-${props.variant}`} onClick={props.onClick}>\n    {props.icon ?? null}\n    <span>{props.text}</span>\n  </button>\n);\n\nButton.propTypes = {\n  text: PropTypes.string.isRequired,\n  icon: PropTypes.node,\n  onClick: PropTypes.func,\n  variant: PropTypes.oneOf([\"success\", \"editor\"]),\n};\n\nexport default Button;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n// Icons\nimport { IoMdClose as CancelIcon } from \"react-icons/io\";\n// Components\nimport Button from \"./Button\";\n\n/*\n * TODO: Create the Form component\n *\n * Requirements:\n * - Must be named Form\n * - Must be a class component\n * - Should implement all the methods defined below\n * - Should render a form element\n * - Should either render an input or a textarea element\n * - Should render a submit button\n * - Should render a cancel icon (optional)\n *\n * Tips:\n * - You can use the 'form' and 'form-*' CSS classes for styling\n *\n */\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n\n    // Refs to access form and control input/textarea DOM nodes\n    this.formRef = React.createRef();\n    this.controlRef = React.createRef();\n\n    // TODO: Define your state properties here\n    this.state = {\n      text: props.initialValue,\n    };\n\n    // TODO: Bind your class methods here\n    // ...\n    this.handleOnChangeText = this.handleOnChangeText.bind(this);\n    this.handleOnSubmit = this.handleOnSubmit.bind(this);\n    this.handleOnKeyDown = this.handleOnKeyDown.bind(this);\n  }\n\n  // TODO: implement the componentDidMount lifecycle method to set focus on the form control element.\n  // Tips:\n  // - Call the `focus` method on the control ref node `this.controlRef.current`\n  componentDidMount() {\n    if (this.controlRef.current !== null) {\n      this.controlRef.current.focus();\n    }\n  }\n\n  // TODO: implement the handleOnChangeText event handler.\n  // Tips:\n  // - Use the `this.setState` method to update the text value of the control from\n  handleOnChangeText(event) {\n    this.setState({\n      text: event.target.value,\n    });\n  }\n\n  // TODO: implement the handleOnSubmit event handler.\n  // Tips:\n  // - Use the `preventDefault` method to prevent the default action\n  // - Call the `this.props.onClickSubmit` method to submit the text\n  // - Clean up the control form value using `this.setState`\n  handleOnSubmit(event) {\n    event.preventDefault();\n    this.props.onClickSubmit(this.state.text);\n    this.setState({\n      text: \"\",\n    });\n  }\n\n  // TODO: implement the handleOnKeyDown event handler.\n  // Tips:\n  // - Use the `key` attribute from the event to check if the user has pressed \"Enter\" on the keyboard\n  // - Call the `this.handleOnSubmit` if the user pressed \"Enter\"\n  handleOnKeyDown(event) {\n    if (event.key === \"Enter\") {\n      this.handleOnSubmit(event);\n    }\n  }\n\n  // TODO: render the Form UI.\n  render() {\n    return (\n      <form ref={this.formRef} className={`form form-${this.props.type}`}>\n        {/* render form control: input or textarea */}\n        {this.props.type === \"list\" || this.props.type === \"labels\" ? (\n          <input\n            type=\"text\"\n            value={this.state.text}\n            placeholder={this.props.placeholder}\n            onChange={this.handleOnChangeText}\n            className=\"form-input\"\n            ref={this.controlRef}\n          />\n        ) : (\n          <textarea\n            type=\"text\"\n            value={this.state.text}\n            placeholder={this.props.placeholder}\n            onChange={this.handleOnChangeText}\n            className=\"form-textarea\"\n            onKeyDown={this.handleOnKeyDown}\n            ref={this.controlRef}\n          />\n        )}\n        <div className=\"form-actions\">\n          {/* render submit button */}\n          <Button\n            text={this.props.buttonText}\n            onClick={this.handleOnSubmit}\n            variant=\"success\"\n          />\n          {/* render cancel icon */}\n          {this.props.onClickCancel && (\n            <CancelIcon\n              className=\"form-cancel-action\"\n              onClick={this.props.onClickCancel}\n            />\n          )}\n        </div>\n      </form>\n    );\n  }\n}\n\nForm.defaultProps = {\n  initialValue: \"\",\n  placeholder: \"\",\n  buttonText: \"\",\n  onClickSubmit: () => null,\n};\n\nForm.propTypes = {\n  type: PropTypes.oneOf([\"list\", \"card\", \"editor\", \"labels\"]).isRequired,\n  initialValue: PropTypes.string,\n  placeholder: PropTypes.string,\n  buttonText: PropTypes.string,\n  onClickSubmit: PropTypes.func,\n  onClickCancel: PropTypes.func,\n};\n\nexport default Form;\n","import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useClickOutsideEffect } from '../hooks';\n\nconst Popover = ({ title = '', children = null, onClickOutside = () => null, offset = {}}) => {\n  const popover = useRef(null);\n\n  useClickOutsideEffect(popover, onClickOutside);\n\n  return (\n    <div\n      ref={popover}\n      className=\"popover\"\n      style={{\n        marginTop: `${offset?.top ?? 0}px`,\n        marginLeft: `${offset?.left ?? 0}px`\n      }}\n    >\n      {\n        title ? (\n          <>\n            <div className=\"popover-header\">\n              <h4>{title}</h4>\n            </div>\n            <hr className=\"divider\" />\n          </>\n        ) : null\n      }\n      {children}\n    </div>\n  );\n};\n\nPopover.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node\n  ]),\n  onClickOutside: PropTypes.func,\n  offset: PropTypes.exact({\n    top: PropTypes.number,\n    left: PropTypes.number\n  })\n};\n\nexport default Popover;\n","import { useEffect, useCallback } from 'react';\n\nexport function useClickOutsideEffect(node, onClickOutside) {\n  const handleClick = useCallback((e) => {\n    if (!node?.current?.contains(e.target) && typeof(onClickOutside) === \"function\") {\n      onClickOutside();\n    }\n  }, [node, onClickOutside]);\n\n  useEffect(() => {\n    document.addEventListener('mousedown', handleClick);\n\n    return () => {\n      document.removeEventListener('mousedown', handleClick);\n    };\n  }, [handleClick]);\n};\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n// Icons\nimport {\n  IoMdCopy as CopyIcon,\n  IoMdArchive as ArchiveIcon,\n  IoMdCreate as EditIcon,\n  IoMdClose as RemoveIcon,\n} from \"react-icons/io\";\n// Components\nimport Button from \"./Button\";\nimport Form from \"./Form\";\nimport Popover from \"./Popover\";\n\n/*\n * TODO: Create the CardEditor component\n *\n * Requirements:\n * - Must be named CardEditor\n * - Must be a class component\n * - Should render a Form component to edit the card description (that contain a textarea and a submit button)\n * - Should render a list of buttons for all editing actions (edit labels, copy, archive)\n * - Should render a Popover component for displaying the label editing form:\n *    - Should render the list of tags\n *    - Should render an icon next to each tag to let the user remove each tag individually\n *    - Should render a Form component to add a new tag (that contain an input and a submit button)\n *\n * Tips:\n * - You can use the 'editor-modal' and 'editor-actions' CSS classes for styling\n *\n */\nclass CardEditor extends Component {\n  constructor(props) {\n    super(props);\n\n    this.editorRef = React.createRef();\n\n    // TODO: Define your state properties here\n    this.state = {\n      isLabelEditOpen: false,\n      closeOnlyLabel: false,\n    };\n\n    this.handleOutsideClick = this.handleOutsideClick.bind(this);\n  }\n\n  handleOutsideClick(event) {\n    if (this.editorRef.current.contains(event.target)) {\n      return;\n    }\n    if (!this.state.closeOnlyLabel) {\n      this.props.onClickOutside();\n    } else {\n      this.setState({\n        closeOnlyLabel: false,\n      });\n    }\n  }\n\n  // TODO: render the CardEditor UI.\n  render() {\n    return (\n      <div className=\"editor-modal\" onClick={this.handleOutsideClick}>\n        <div\n          ref={this.editorRef}\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            position: \"absolute\",\n            top: `${this.props?.position?.top ?? 0}px`,\n            left: `${this.props?.position?.left ?? 0}px`,\n          }}\n        >\n          <div>\n            {/* render editor form */}\n            <Form\n              type=\"editor\"\n              initialValue={this.props.initialValue}\n              buttonText=\"Save\"\n              onClickSubmit={this.props.onSaveCard}\n            />\n          </div>\n          <ul className=\"editor-actions\">\n            {/* render editor actions */}\n            <li className=\"editor-action\">\n              <Button\n                text=\"Edit Labels\"\n                icon={<EditIcon />}\n                variant=\"editor\"\n                onClick={() => this.setState({ isLabelEditOpen: true })}\n              />\n            </li>\n            <li className=\"editor-action\">\n              <Button\n                text=\"Copy\"\n                icon={<CopyIcon />}\n                variant=\"editor\"\n                onClick={this.props.onCopyCard}\n              />\n            </li>\n            <li className=\"editor-action\">\n              <Button\n                text=\"Archive\"\n                icon={<ArchiveIcon />}\n                variant=\"editor\"\n                onClick={this.props.onArchiveCard}\n              />\n            </li>\n            {/* render tags editing form */}\n            {this.state.isLabelEditOpen && (\n              <Popover\n                title=\"Labels\"\n                onClickOutside={() =>\n                  this.setState({\n                    isLabelEditOpen: false,\n                    closeOnlyLabel: true,\n                  })\n                }\n                offset={{ top: -119 }}\n              >\n                <div>\n                  <ul className=\"labels\">\n                    {this.props.tags.map((tag, index) => (\n                      <li\n                        key={index}\n                        className=\"label\"\n                        onClick={() => this.props.onRemoveTag(index)}\n                      >\n                        <RemoveIcon />\n                        <p>{tag}</p>\n                      </li>\n                    ))}\n                  </ul>\n                  <h4 className=\"new-label-title\">Add a new label</h4>\n                  <Form\n                    type=\"labels\"\n                    placeholder=\"Enter a name for this label...\"\n                    buttonText=\"Add\"\n                    onClickSubmit={this.props.onAddTag}\n                  />\n                </div>\n              </Popover>\n            )}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nCardEditor.defaultProps = {\n  initialValue: \"\",\n  tags: [],\n  position: null,\n  onSaveCard: () => null,\n  onRemoveTag: () => null,\n  onAddTag: () => null,\n  onCopyCard: () => null,\n  onArchiveCard: () => null,\n  onClickOutside: () => null,\n};\n\nCardEditor.propTypes = {\n  initialValue: PropTypes.string,\n  tags: PropTypes.arrayOf(PropTypes.string),\n  position: PropTypes.exact({\n    top: PropTypes.number,\n    left: PropTypes.number,\n  }),\n  onSaveCard: PropTypes.func,\n  onRemoveTag: PropTypes.func,\n  onAddTag: PropTypes.func,\n  onCopyCard: PropTypes.func,\n  onArchiveCard: PropTypes.func,\n  onClickOutside: PropTypes.func,\n};\n\nexport default CardEditor;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n// Icons\nimport { IoIosMore as MenuIcon } from \"react-icons/io\";\n// Components\nimport Popover from \"./Popover\";\n\n/*\n * TODO: Create the Menu component\n *\n * Requirements:\n * - Must be named Menu\n * - Must be a function component\n * - Should render a <div> element as the container for the menu content\n * - Should render an icon the user can click to open/close the menu\n * - Should render the lists of actions inside a Popover component if the menu is open\n * - The Popover component should be mounted only if the menu is open\n * - Each list of actions should be separated by an horizontal line (use a <hr> element)\n *\n * Tips:\n * - You can use the 'menu' CSS class for styling\n *\n */\nconst Menu = (props) => (\n  <div className=\"menu\">\n    {/* render the menu icon */}\n    <MenuIcon onClick={props.onClick} />\n    {/* render the lists of actions */}\n    {props.isOpen && (\n      <Popover title=\"List Actions\" onClickOutside={props.onClick}>\n        {props.actions.map((action, actionsIndex) => (\n          <div key={actionsIndex}>\n            <ul className=\"menu-actions\">\n              {action.map(({ title, onClick }, actionIndex) => (\n                <li className=\"menu-action\" key={actionIndex} onClick={onClick}>\n                  <p>{title}</p>\n                </li>\n              ))}\n            </ul>\n            <hr className=\"divider\" />\n          </div>\n        ))}\n      </Popover>\n    )}\n  </div>\n);\n\nMenu.propTypes = {\n  isOpen: PropTypes.bool,\n  onClick: PropTypes.func,\n  actions: PropTypes.arrayOf(\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        onClick: PropTypes.func,\n        title: PropTypes.string.isRequired,\n      })\n    )\n  ),\n};\n\nexport default Menu;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n// Icons\nimport { IoMdAdd as AddIcon } from \"react-icons/io\";\n// Components\nimport Card from \"./Card\";\nimport CardEditor from \"./CardEditor\";\nimport Menu from \"./Menu\";\nimport Form from \"./Form\";\n\n/*\n * TODO: Create the CardsList component\n *\n * Requirements:\n * - Must be named CardsList\n * - Must be a class component\n * - Should render a <div> element as the container for the card\n * - Should render the tags list at the top of the card content\n * - Should render the card number and description below the tags\n *\n * Tips:\n * - You can use the 'card' CSS class for styling\n *\n */\nclass CardsList extends Component {\n  constructor(props) {\n    super(props);\n\n    // CardsList state\n    this.state = {\n      creatingNewCard: false,\n      editCardId: null,\n      editCardText: \"\",\n      editCardTags: [],\n    };\n\n    this.cardRefs = {};\n\n    // TODO: Define all the card actions here\n    this.actions = [\n      [\n        {\n          title: \"Add Card...\",\n          onClick: () => {\n            this.props.onToggleMenu(this.props.id);\n            this.setState({ creatingNewCard: true });\n          }, // TODO // done\n        },\n        {\n          title: \"Copy List...\",\n          onClick: () => this.props.onCopyList(this.props.id), // TODO //done\n        },\n      ],\n      [\n        {\n          title: \"Move All Cards in This List...\",\n          onClick: () => this.props.onMoveAllCards(this.props.id), // TODO // done\n        },\n        {\n          title: \"Archive All Cards in This List...\",\n          onClick: () => this.props.onRemoveAllCards(this.props.id), // TODO // done\n        },\n      ],\n      [\n        {\n          title: \"Archive This List\",\n          onClick: () => this.props.onRemoveList(this.props.id), // TODO // done\n        },\n      ],\n    ];\n\n    // TODO: Bind your class methods here\n    // ...\n    this.handleAddNewCard = this.handleAddNewCard.bind(this); // done\n    this.handleCancelNewCard = this.handleCancelNewCard.bind(this); // done\n    this.handleCreateNewCard = this.handleCreateNewCard.bind(this); // done\n    this.handleEditCard = this.handleEditCard.bind(this);\n    this.handleCancelEdit = this.handleCancelEdit.bind(this);\n    this.handleCopyCard = this.handleCopyCard.bind(this);\n    this.handleSaveCard = this.handleSaveCard.bind(this);\n    this.handleArchiveCard = this.handleArchiveCard.bind(this);\n    this.handleRemoveTag = this.handleRemoveTag.bind(this);\n    this.handleAddTag = this.handleAddTag.bind(this);\n  }\n\n  // TODO: implement the handleAddNewCard method to add a new card to the list.\n  // Tips:\n  // - Call the `this.props.onAddCard` function to add a new card\n  // - Use the `this.setState` method to update the state in order to close the card creation form\n  handleAddNewCard(cardText = \"\") {\n    if (cardText) {\n      this.props.onAddCard(this.props.id, cardText);\n    }\n    this.handleCancelNewCard();\n  }\n\n  // TODO: implement the handleCancelNewCard method.\n  // Tips:\n  // - Use the `this.setState` method to update the state in order to close the card creation form\n  handleCancelNewCard() {\n    this.setState({ creatingNewCard: false });\n  }\n\n  // TODO: implement the handleCreateNewCard method.\n  // Tips:\n  // - Use the `this.setState` method to update the state in order to open the card creation form\n  handleCreateNewCard() {\n    this.setState({ creatingNewCard: true });\n  }\n\n  // TODO: implement the handleEditCard method.\n  // Tips:\n  // - Use the `this.setState` method to update the text and tags values of the editing from\n  handleEditCard(id, text, tags) {\n    this.setState({\n      editCardId: id,\n      editCardText: text,\n      editCardTags: tags,\n    });\n  }\n\n  // TODO: implement the handleCancelEdit method.\n  // Tips:\n  // - Use the `this.setState` method to reset and close the editing form\n  handleCancelEdit() {\n    this.setState({\n      editCardId: null,\n      editCardText: \"\",\n      editCardTags: [],\n    });\n  }\n\n  // TODO: implement the handleCopyCard method.\n  // Tips:\n  // - Call the `this.props.onCopyCard` function to clone a card\n  // - Do not forget to reset and close the editing form\n  handleCopyCard() {\n    this.props.onCopyCard(this.props.id, this.state.editCardId);\n    this.handleCancelEdit();\n  }\n\n  // TODO: implement the handleArchiveCard method.\n  // Tips:\n  // - Call the `this.props.onRemoveCard` function to remove a card form the list\n  // - Do not forget to reset and close the editing form\n  handleArchiveCard() {\n    this.props.onRemoveCard(this.props.id, this.state.editCardId);\n    this.handleCancelEdit();\n  }\n\n  // TODO: implement the handleSaveCard method.\n  // Tips:\n  // - Call the `this.props.onEditCard` function to save changes on the card\n  // - Do not forget to reset and close the editing form\n  handleSaveCard(text) {\n    this.props.onEditCard(this.state.editCardId, text);\n    this.handleCancelEdit();\n  }\n\n  // TODO: implement the handleRemoveTag method.\n  // Tips:\n  // - Call the `this.props.onRemoveTag` function to remove a tag from a card\n  handleRemoveTag(tagId) {\n    this.props.onRemoveTag(this.state.editCardId, tagId);\n  }\n\n  // TODO: implement the handleAddTag method.\n  // Tips:\n  // - Call the `this.props.onAddTag` function to add a tag to a card\n  handleAddTag(text) {\n    if (text) {\n      this.props.onAddTag(this.state.editCardId, text);\n    }\n  }\n\n  // TODO: implement the renderHeader method to render the list header UI.\n  // Tips:\n  // - Should render a h3 tag for the list title\n  // - Should render a Menu component\n  // - Should render the number of cards in the list\n  renderHeader() {\n    const { title, cards } = this.props;\n    return (\n      <div className=\"cards-list-header\">\n        <div className=\"cards-list-title\">\n          {/* render the list title */}\n          <h3>{title}</h3>\n          {/* render the Menu component */}\n          <Menu\n            isOpen={this.props.isMenuOpen}\n            onClick={() => this.props.onToggleMenu(this.props.id)}\n            actions={this.actions}\n          />\n        </div>\n        {/* render the number of cards in this list */}\n        <p>{cards.length} cards</p>\n      </div>\n    );\n  }\n\n  // TODO: implement the renderCards method to render the cards.\n  // Tips:\n  // - Iterate through this.props.cards to render each Card\n  renderCards() {\n    return (\n      <div className=\"cards\">\n        {\n          /* render the cards */\n          this.props.cards.map(({ id, number, description, tags }, index) => (\n            <li\n              key={id}\n              onClick={() => this.handleEditCard(id, description, tags)}\n              ref={(node) => {\n                if (node) {\n                  this.cardRefs[id] = node;\n                }\n              }}\n            >\n              <Card\n                id={id}\n                number={number}\n                description={description}\n                tags={tags}\n              />\n            </li>\n          ))\n        }\n      </div>\n    );\n  }\n\n  // TODO: implement the renderFooter method to render the list footer UI.\n  // Tips:\n  // - Should render either a Form component to create a new card\n  // or a button to trigger the card creation mode (creatingNewCard)\n  renderFooter() {\n    return this.state.creatingNewCard ? (\n      <Form\n        type=\"card\"\n        placeholder=\"Enter a title for this card...\"\n        buttonText=\"Add Card\"\n        onClickSubmit={this.handleAddNewCard}\n        onClickCancel={this.handleCancelNewCard}\n      />\n    ) : (\n      <button\n        className=\"add-button add-card-button\"\n        onClick={this.handleCreateNewCard}\n      >\n        <AddIcon />\n        <p>Add a new card</p>\n      </button>\n    );\n  }\n\n  // TODO: render the CardsList UI.\n  render() {\n    return (\n      <div className=\"cards-list\">\n        {/* render list header */}\n        {this.renderHeader()}\n        {/* render cards */}\n        {this.renderCards()}\n        {/* render list footer */}\n        {this.renderFooter()}\n        {/* render card editor */}\n        {this.state.editCardId && (\n          <CardEditor\n            initialValue={this.state.editCardText}\n            tags={this.state.editCardTags}\n            position={{\n              top: this.cardRefs[this.state.editCardId].getBoundingClientRect()\n                .top,\n              left: this.cardRefs[this.state.editCardId].getBoundingClientRect()\n                .left,\n            }}\n            onSaveCard={this.handleSaveCard}\n            onRemoveTag={this.handleRemoveTag}\n            onAddTag={this.handleAddTag}\n            onCopyCard={this.handleCopyCard}\n            onArchiveCard={this.handleArchiveCard}\n            onClickOutside={() => this.handleCancelEdit()}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nCardsList.defaultProps = {\n  cards: null,\n  isMenuOpen: false,\n  onToggleMenu: () => null,\n  onAddCard: () => null,\n  onRemoveCard: () => null,\n  onRemoveList: () => null,\n  onRemoveAllCards: () => null,\n  onCopyList: () => null,\n  onMoveAllCards: () => null,\n  onCopyCard: () => null,\n  onEditCard: () => null,\n  onRemoveTag: () => null,\n  onAddTag: () => null,\n};\n\nCardsList.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  cards: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string.isRequired,\n      number: PropTypes.number.isRequired,\n      description: PropTypes.string,\n      tags: PropTypes.arrayOf(PropTypes.string),\n    })\n  ),\n  isMenuOpen: PropTypes.bool,\n  onToggleMenu: PropTypes.func,\n  onAddCard: PropTypes.func,\n  onRemoveCard: PropTypes.func,\n  onRemoveList: PropTypes.func,\n  onRemoveAllCards: PropTypes.func,\n  onCopyList: PropTypes.func,\n  onMoveAllCards: PropTypes.func,\n  onCopyCard: PropTypes.func,\n  onEditCard: PropTypes.func,\n  onRemoveTag: PropTypes.func,\n  onAddTag: PropTypes.func,\n};\n\nexport default CardsList;\n","const data = {\n  cards: {\n    \"k9atfadyp\": { \n      id: \"k9atfadyp\", \n      number: 1, \n      description: \"Create reusable React components\", \n      tags: [\"Priority: Medium\", \"React\"] \n    },\n    \"8wu6w8mxg\": { \n      id: \"8wu6w8mxg\", \n      number: 2, \n      description: \"Learn React Hooks\", \n      tags: [\"React\", \"Hooks\"] \n    },\n    \"c96h9478v\": { \n      id: \"c96h9478v\", \n      number: 3, \n      description: \"Create Beautiful Drag and Drop Capability\", \n      tags: [\"Priority: Low\", \"react-beautiful-dnd\"]\n    },\n    \"rtwf8u120\": { \n      id: \"rtwf8u120\", \n      number: 4,\n      description: \"Learn React\", \n      tags: [\"Priority: High\", \"React\"] \n    },\n    \"vt6udjrpz\": { \n      id: \"vt6udjrpz\", \n      number: 5, \n      description: \"Write my first React component\", \n      tags: [\"Priority: Medium\"] \n    },\n    \"ftrch98nt\": { \n      id: \"ftrch98nt\", \n      number: 6, \n      description: \"Create React App\", \n      tags: [\"Priority: Medium\", \"create-react-app\"] \n    },\n    \"bionb64f7\": { \n      id: \"bionb64f7\", \n      number: 7, \n      description: \"Write my first React component\", \n      tags: [\"Priority: Medium\"] \n    }\n  },\n  lists: {\n    \"f0y88ej8u\": { \n      id: \"f0y88ej8u\",\n      title: \"Product Backlog\",\n      cardIds: [\"k9atfadyp\", \"8wu6w8mxg\", \"c96h9478v\"]\n    },\n    \"1528b8oyp\": {\n      id: \"1528b8oyp\",\n      title: \"Work In Progress\",\n      cardIds: [\"rtwf8u120\", \"vt6udjrpz\"]\n    },\n    \"yu0myoowp\": {\n      id: \"yu0myoowp\",\n      title: \"Done\",\n      cardIds: [\"ftrch98nt\", \"bionb64f7\"]\n    }\n  },\n  listOrder: [\"f0y88ej8u\", \"1528b8oyp\", \"yu0myoowp\"]\n};\n\nexport default data;\n","import React, { Component } from \"react\";\nimport { _getNextNumber, _generateId } from \"../utils\";\n// Icons\nimport { IoMdAdd as AddIcon } from \"react-icons/io\";\n// Components\nimport CardsList from \"./CardsList\";\nimport Form from \"./Form\";\n\nimport data from \"../data\";\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n\n    // Board state\n    this.state = {\n      lists: {},\n      cards: {},\n      listOrder: [],\n      newListText: \"\",\n      creatingNewList: false,\n      openMenuId: null,\n    };\n\n    // TODO: Bind your class methods here\n    // ...\n    this.handleAddList = this.handleAddList.bind(this); // done\n    this.handleRemoveList = this.handleRemoveList.bind(this); // done\n    this.handleAddCard = this.handleAddCard.bind(this); // done\n    this.handleRemoveCard = this.handleRemoveCard.bind(this); // done\n    this.handleRemoveAllCards = this.handleRemoveAllCards.bind(this); // done\n    this.handleCopyCard = this.handleCopyCard.bind(this); // done\n    this.handleCopyList = this.handleCopyList.bind(this); // done\n    this.handleMoveAllCards = this.handleMoveAllCards.bind(this); // done\n    this.handleToggleMenu = this.handleToggleMenu.bind(this); // done\n    this.handleEditCard = this.handleEditCard.bind(this); // done\n    this.handleRemoveTag = this.handleRemoveTag.bind(this);\n    this.handleAddTag = this.handleAddTag.bind(this);\n    this.renderLists = this.renderLists.bind(this); // done\n  }\n\n  // TODO: implement the componentDidMount lifecycle method to fetch data and init the component state.\n  // Tips:\n  // - Use the `this.setState` method to update the component state\n  componentDidMount() {\n    this.setState({\n      lists: data.lists,\n      cards: data.cards,\n      listOrder: data.listOrder,\n    });\n  }\n\n  // TODO: implement the handleAddList method to add a new list to the board.\n  // Tips:\n  // - Check if the list title is not an empty string. Do not create the list otherwise\n  // - Use the `_generateId` function to generate a unique Id for the new list\n  // - Add the new list\n  // - Use the `this.setState` method to update the state (lists, listOrder, newListText, creatingNewList)\n  // - Reset the `newListText` and `creatingNewList` state values as well to cleanup and close the form\n  handleAddList(title = \"\") {\n    if (title.trim()) {\n      const id = _generateId();\n      const { lists, listOrder } = this.state;\n      lists[id] = { id, title, cardIds: [] };\n      listOrder.push(id);\n      this.setState({\n        lists,\n        listOrder,\n        newListText: \"\",\n        creatingNewList: false,\n      });\n    } else {\n      this.setState({ newListText: \"\", creatingNewList: false });\n    }\n  }\n\n  // TODO: implement the handleRemoveList method to remove a list from the board.\n  // Tips:\n  // - Delete all cards from the list\n  // - Delete list itself\n  // - Use the `this.setState` method to update the state (lists, cards, listOrder)\n  handleRemoveList(listId) {\n    const { lists, listOrder, cards } = this.state;\n    lists[listId].cardIds.map((id) => delete cards[id]);\n    delete lists[listId];\n    const index = listOrder.indexOf(listId);\n    if (index > -1) {\n      listOrder.splice(index, 1);\n    }\n\n    this.setState({\n      lists,\n      cards,\n      listOrder,\n    });\n  }\n\n  // TODO: implement the handleAddCard method to add a card to a list.\n  // Tips:\n  // - Check if the card description is not an empty string. Do not create the card otherwise\n  // - Use the `_generateId` function to generate a unique Id for the new card\n  // - Use the `_getNextNumber` function to get the new card number\n  // - Add the new card\n  // - Use the `this.setState` method to update the state (lists, cards)\n  handleAddCard(listId, description = \"\") {\n    if (description.trim()) {\n      const { lists, cards } = this.state;\n      const id = _generateId();\n      const number = _getNextNumber(cards);\n      cards[id] = {\n        id,\n        number,\n        description,\n        tags: [],\n      };\n      lists[listId].cardIds.push(id);\n      this.setState({\n        lists,\n        cards,\n      });\n    }\n  }\n\n  // TODO: implement the handleRemoveCard method to remove a card from a list.\n  // Tips:\n  // - Delete card\n  // - Remove card Id from the corresponding list\n  // - Use the `this.setState` method to update the state (lists, cards)\n  handleRemoveCard(listId, cardId) {\n    const { lists, cards } = this.state;\n    delete cards[cardId];\n    const cardIndex = lists[listId].cardIds.indexOf(cardId);\n    if (cardIndex > -1) {\n      lists[listId].cardIds.splice(cardIndex, 1);\n    }\n    this.setState({ lists, cards });\n  }\n\n  // TODO: implement the handleRemoveAllCards method to remove all cards from a list.\n  // Tips:\n  // - Delete all cards from the corresponding list\n  // - Remove card Ids from the list\n  // - Use the `this.setState` method to update the state (lists, cards, openMenuId)\n  // - Close the opened menu by reseting the openMenuId state value\n  handleRemoveAllCards(listId) {\n    const { lists, cards } = this.state;\n    lists[listId].cardIds.map((id) => delete cards[id]);\n    lists[listId].cardIds = [];\n\n    this.setState({\n      lists,\n      cards,\n      openMenuId: null,\n    });\n  }\n\n  // TODO: implement the handleCopyCard method to copy a card from a list to another.\n  // Tips:\n  // - Create card copy\n  // - Use the `_generateId` function to generate a unique Id for the new card\n  // - Use the `_getNextNumber` function to get the new card number\n  // - Add it to the list\n  // - Use the `this.setState` method to update the state (lists, cards)\n  handleCopyCard(listId, cardId) {\n    const { lists, cards } = this.state;\n    const id = _generateId();\n    const number = _getNextNumber(cards);\n    cards[id] = {\n      id,\n      number,\n      description: cards[cardId].description,\n      tags: cards[cardId].tags,\n    };\n    lists[listId].cardIds.push(id);\n\n    this.setState({\n      lists,\n      cards,\n    });\n  }\n\n  // TODO: implement the handleCopyList method to clone an entire list.\n  // Tips:\n  // - Copy all cards from list to clone\n  // - Use the `_generateId` function to generate a unique Id for every cloned cards\n  // - Use the `_getNextNumber` function to get a new card number for every cloned cards\n  // - Create a new list and add all the cloned cards\n  // - Use the `_generateId` function to generate a unique Id for the new list\n  // - Edit the new list title to append '(Copy) - ' to it\n  // - Use the `this.setState` method to update the state (lists, cards, listOrder, openMenuId)\n  // - Close the opened menu by reseting the openMenuId state value\n  handleCopyList(listId) {\n    const { lists, cards, listOrder } = this.state;\n    const clonedCards = lists[listId].cardIds.map((id) => {\n      const card = cards[id];\n      const newId = _generateId();\n      const newNumber = _getNextNumber(cards);\n      cards[newId] = {\n        id: newId,\n        number: newNumber,\n        description: card.description,\n        tags: card.tags,\n      };\n      return newId;\n    });\n    const newListId = _generateId();\n    lists[newListId] = {\n      id: newListId,\n      title: `(Copy) - ${lists[listId].title}`,\n      cardIds: clonedCards,\n    };\n    listOrder.push(newListId);\n    this.setState({\n      lists,\n      cards,\n      listOrder,\n      openMenuId: null,\n    });\n  }\n\n  // TODO: implement the handleMoveAllCards method to move all cards to a list.\n  // Tips:\n  // - Update all the lists\n  // - The target list should get all the cards. The other lists should be emptied\n  // - Use the `this.setState` method to update the state (lists, openMenuId)\n  // - Close the opened menu by reseting the openMenuId state value\n  handleMoveAllCards(listId) {\n    const { lists, cards } = this.state;\n    for (let id in lists) {\n      if (id === listId) {\n        lists[id].cardIds = Object.keys(cards);\n      } else {\n        lists[id].cardIds = [];\n      }\n    }\n\n    this.setState({\n      lists,\n      openMenuId: null,\n    });\n  }\n\n  // TODO: implement the handleToggleMenu method to toggle the corresponding list menu.\n  // Tips:\n  // - Use the `this.setState` method to update the state (openMenuId)\n  handleToggleMenu(listId) {\n    this.setState({\n      openMenuId: this.state.openMenuId !== listId ? listId : null,\n    });\n  }\n\n  // TODO: implement the handleEditCard method to update the card description.\n  // Tips:\n  // - Use the `this.setState` method to update the state (cards)\n  handleEditCard(cardId, description = \"\") {\n    const { cards } = this.state;\n    cards[cardId].description = description;\n    this.setState({\n      cards,\n    });\n  }\n\n  // TODO: implement the handleRemoveTag method to remove a tag from a card.\n  // Tips:\n  // - Use the `this.setState` method to update the state (cards)\n  handleRemoveTag(cardId, tagId) {\n    const { cards } = this.state;\n    cards[cardId].tags.splice(tagId, 1);\n    this.setState({ cards });\n  }\n\n  // TODO: implement the handleAddTag method to add a tag to a card.\n  // Tips:\n  // - Use the `this.setState` method to update the state (cards)\n  handleAddTag(cardId, text = \"\") {\n    const { cards } = this.state;\n    cards[cardId].tags.push(text);\n    this.setState({ cards });\n  }\n\n  // TODO: implement the renderLists method to render the board lists UI.\n  // Tips:\n  // - Iterate through the listOrder state array to render each list of cards (CardsList)\n  // - Pass the necessary methods to the CardsList component to handle all actions\n  renderLists() {\n    const { listOrder, lists, cards } = this.state;\n    return (\n      <div className=\"board-lists\">\n        {/* render the lists */}\n        {listOrder.map((listId) => {\n          const orderCards = lists[listId].cardIds.map(\n            (cardId) => cards[cardId]\n          );\n          return (\n            <li key={listId}>\n              <CardsList\n                id={listId}\n                title={lists[listId].title}\n                cards={orderCards}\n                isMenuOpen={this.state.openMenuId === listId}\n                onToggleMenu={this.handleToggleMenu}\n                onAddCard={this.handleAddCard}\n                onRemoveCard={this.handleRemoveCard}\n                onRemoveList={this.handleRemoveList}\n                onRemoveAllCards={this.handleRemoveAllCards}\n                onCopyList={this.handleCopyList}\n                onMoveAllCards={this.handleMoveAllCards}\n                onCopyCard={this.handleCopyCard}\n                onEditCard={this.handleEditCard}\n                onRemoveTag={this.handleRemoveTag}\n                onAddTag={this.handleAddTag}\n              />\n            </li>\n          );\n        })}\n      </div>\n    );\n  }\n\n  // TODO: implement the renderNewList method to render the list creation form.\n  // Tips:\n  // - Render a Form component in creation mode to let the user enter the new list title\n  // - Otherwise, render a button to trigger the creation mode (creatingNewList)\n  renderNewList() {\n    console.log(this.state.creatingNewList);\n    return this.state.creatingNewList ? (\n      <Form\n        type=\"list\"\n        placeholder=\"Enter a title for this list...\"\n        buttonText=\"Add List\"\n        onClickSubmit={this.handleAddList}\n        onClickCancel={() => this.setState({ creatingNewList: false })}\n      ></Form>\n    ) : (\n      <button\n        className=\"add-button\"\n        onClick={() => this.setState({ creatingNewList: true })}\n      >\n        <AddIcon />\n        <p>Add a new list</p>\n      </button>\n    );\n  }\n\n  // TODO: render the Board UI.\n  render() {\n    return (\n      <div className=\"board\">\n        {/* render the lists */}\n        {this.renderLists()}\n        {/* render the list creation form */}\n        {this.renderNewList()}\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React from 'react';\n\nconst Header = () => (\n  <header className=\"app-header\">\n    <h1>React Trello</h1>\n  </header>\n);\n\nexport default Header;\n","import React from \"react\";\n\nconst Footer = () => (\n  <footer className=\"app-footer\">\n    Looking for help? Head over to the <a href=\"https://discord.com/channels/742753758450155662/748890194136137838\">Discord server</a> and ask the community.\n  </footer>\n);\n\nexport default Footer;\n","import React from \"react\";\n// Components\nimport Board from \"./components/Board\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\n// Stylesheets\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Header />\n      <Board />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}